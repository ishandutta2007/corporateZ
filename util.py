#!/usr/bin/python3

from functools import reduce
from os.path import dirname, exists
from os import mkdir
try:
    from matplotlib import pyplot as plt
except ImportError as e:
    print('[!]Module Unavailable : {}'.format(str(e)))
    exit(1)

'''
    Takes a Dict[str, int], which is generated by function(s) defined below 
    ( categorizes company dataset, for a certain State in India, using various parameters )
    & a targetPath on local file system ( an image of `*.png` form ),
    where to store this generated PIE chart.
'''


def plotCategorizedCompanyDataForACertainState(dataSet, targetPath, title):
    try:
        if(not exists(dirname(targetPath))):
            # creating target directory if not existing already
            mkdir(dirname(targetPath))
        labels = sorted(dataSet, key=lambda elem:
                        dataSet[elem], reverse=True)
        # this is the actual data to be plotted
        data = [dataSet[i] for i in labels]
        # figure on which pie chart to be drawn ( of size 1600x1200 )
        plt.figure(figsize=(16, 12), dpi=100)
        patches, _ = plt.pie(data)  # plotting pie chart
        plt.legend(patches, labels, loc='best')
        plt.title(title)
        plt.axis('equal')
        plt.tight_layout()
        plt.savefig(targetPath, bbox_inches='tight',
                    pad_inches=.5)  # exporting plotted PIE chart
        plt.close()  # closing this figure on which we just plotted a PIE chart
        return True
    except Exception:
        return False


'''
    Takes a list of all companies present in one State ( instances of model.corporateStat.Company )
    as argument & returns a Dict[str, int] holding count of all companies of a
    certain state, categorzied as per their STATUS, which is to be used for plotting a PIE chart.
'''


def categorizeAsPerCompanyStatus(dataSet):
    return reduce(lambda acc, cur: dict([(cur.status, 1)] + [(k, v) for k, v in acc.items()]) if cur.status not in acc else dict(((k, v + 1) if k == cur.status else (k, v) for k, v in acc.items())), dataSet, {})


'''
    Takes a list of all companies present in one State ( instances of model.corporateStat.Company )
    as argument & returns a Dict[str, int] holding count of all companies of a
    certain state, categorzied as per their CLASS, which is to be used for plotting a PIE chart.
'''


def categorizeAsPerCompanyClass(dataSet):
    return reduce(lambda acc, cur: dict([(cur.companyClass, 1)] + [(k, v) for k, v in acc.items()]) if cur.companyClass not in acc else dict(((k, v + 1) if k == cur.companyClass else (k, v) for k, v in acc.items())), dataSet, {})


'''
    Takes a list of all companies present in one State ( instances of model.corporateStat.Company )
    as argument & returns a Dict[str, int] holding count of all companies of a
    certain state, categorzied as per their CATEGORY, which is to be used for plotting a PIE chart.
'''


def categorizeAsPerCompanyCategory(dataSet):
    return reduce(lambda acc, cur: dict([(cur.category, 1)] + [(k, v) for k, v in acc.items()]) if cur.category not in acc else dict(((k, v + 1) if k == cur.category else (k, v) for k, v in acc.items())), dataSet, {})


if __name__ == '__main__':
    print('[!]This module is expected to be used as a backend handler')
    exit(0)
